# Task ID: 65
# Title: Create Shared Test Configuration Package (`test-config`)
# Status: done
# Dependencies: 1, 64
# Priority: medium
# Description: Create a new shared test configuration package under 'packages/test-config' to provide a centralized vitest.config.ts. This will allow all apps and packages to extend a base test configuration, simplifying test setup across the monorepo.
# Details:
Create a new directory `packages/test-config`. Inside, initialize a `package.json` with the name `@repo/test-config`. Add necessary dev dependencies like `vitest`, `@vitejs/plugin-react`, and `jsdom`. Create a `vitest.config.ts` file that exports a base configuration object using `defineConfig`. This base config should include common settings such as `globals: true`, `environment: 'jsdom'`, and a path to a global setup file (e.g., `src/setup.ts`). Update at least one existing application or package (e.g., `apps/web`) to use this new shared config by adding `@repo/test-config` as a dev dependency and modifying its local `vitest.config.ts` to import and extend the base configuration.

# Test Strategy:
Verify that the `packages/test-config` directory and its `package.json` exist and are correctly configured. Inspect the `packages/test-config/vitest.config.ts` file to ensure it exports a reusable Vitest configuration. Check the `package.json` of another package (e.g., `apps/web`) to confirm `@repo/test-config` is listed as a dev dependency. Finally, run the test suite for the consuming package (e.g., `pnpm --filter @repo/web test`) and ensure all tests pass, confirming the shared configuration is being applied correctly.

# Subtasks:
## 1. Scaffold `test-config` Package Structure and `package.json` [done]
### Dependencies: None
### Description: Create the basic directory structure and `package.json` file for the new shared `@repo/test-config` package.
### Details:
Create a new directory `packages/test-config`. Inside this directory, create a `package.json` file with the following content:
{
  "name": "@repo/test-config",
  "version": "0.1.0",
  "private": true,
  "main": "./vitest.config.ts",
  "types": "./vitest.config.ts",
  "scripts": {
    "clean": "rm -rf .turbo node_modules"
  }
}
Also, create an empty `src` directory inside `packages/test-config`.

## 2. Install Dependencies for `test-config` Package [done]
### Dependencies: 65.1
### Description: Add all necessary development dependencies to the `@repo/test-config` package to support Vitest, React, and JSDOM.
### Details:
Using your package manager (e.g., pnpm), add the following packages as development dependencies to the `@repo/test-config` workspace:
- `vitest`
- `@vitejs/plugin-react`
- `jsdom`
- `typescript`
- `@testing-library/jest-dom`
Example command: `pnpm add -D vitest @vitejs/plugin-react jsdom typescript @testing-library/jest-dom --filter @repo/test-config`

## 3. Create Base `vitest.config.ts` and Global Setup File [done]
### Dependencies: 65.2
### Description: Create the reusable `vitest.config.ts` file that exports the base test configuration, and the global setup file it references.
### Details:
In `packages/test-config`, create a `vitest.config.ts` file. This file should import `defineConfig` from `vitest/config` and `react` from `@vitejs/plugin-react`. Export a default configuration object with `globals: true`, `environment: 'jsdom'`, `plugins: [react()]`, and `setupFiles: ['./src/setup.ts']`. 

Next, create the setup file at `packages/test-config/src/setup.ts`. In this file, import `@testing-library/jest-dom/vitest` to extend Vitest's `expect` with DOM assertions.

## 4. Integrate `@repo/test-config` into an Existing Application [done]
### Dependencies: 65.3
### Description: Update an existing application, such as `apps/web`, to use the new shared test configuration package.
### Details:
1. Add `@repo/test-config` as a development dependency to an existing application (e.g., `apps/web`) using `pnpm add -D @repo/test-config --filter web`.
2. Modify the `vitest.config.ts` file in `apps/web`. Import the base configuration from `@repo/test-config` and use `mergeConfig` from `vitest/config` to extend it. The file should look similar to this:

import { defineConfig, mergeConfig } from 'vitest/config';
import baseConfig from '@repo/test-config/vitest.config';

export default mergeConfig(baseConfig, defineConfig({
  // App-specific overrides can go here
}));

## 5. Verify Shared Configuration by Running Tests in Consuming App [done]
### Dependencies: 65.4
### Description: Run the test suite for the application that was updated to use the shared config to ensure everything works as expected.
### Details:
Navigate to the directory of the application updated in the previous step (e.g., `apps/web`). Run its test script (e.g., `pnpm test`). The tests should execute successfully without any configuration-related errors. Confirm that global setups, such as `jest-dom` matchers, are available in the tests without needing to be imported in every test file.

