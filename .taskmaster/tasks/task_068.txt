# Task ID: 68
# Title: Backend: Audit and Validate userId Handling Post-Better Auth Integration
# Status: pending
# Dependencies: 8, 12, 18, 37, 38, 39
# Priority: medium
# Description: Conduct a comprehensive audit of the backend to ensure the `userId` from Better Auth is correctly and securely handled across all layers, from API routes to the database. This task verifies data ownership and prevents `userId` exposure in public API responses.
# Details:
Following the integration of Better Auth (Task 12), a full review of user identification handling is required. 1. **Route Handlers & Middleware:** Verify that all protected routes correctly extract the authenticated user's `userId` from the session context provided by Better Auth. 2. **Service & Repository Layers:** Ensure that all functions operating on user-specific data (e.g., bookmarks) explicitly accept `userId` as a parameter. This `userId` must be used in all subsequent database queries to scope the operation correctly. 3. **Data Models & Queries:** Review Drizzle schemas for tables like `bookmarks` to confirm they contain a non-nullable `userId` foreign key. Audit all database queries (SELECT, INSERT, UPDATE, DELETE) to ensure they include a `WHERE userId = ?` clause to enforce strict data isolation between users. 4. **API Response Payloads:** Scrutinize all data transformation objects (DTOs) or response formatters to guarantee that the `userId` field is never included in JSON payloads sent to the client.

# Test Strategy:
1. **Automated Integration Tests:** Write new tests to cover authorization scenarios. For example, authenticate as User A, create a bookmark, and then authenticate as User B and attempt to read, update, or delete User A's bookmark, asserting that a 403 Forbidden or 404 Not Found error is returned. 2. **Payload Schema Validation:** Enhance existing API tests to assert that the `userId` field is absent from all response bodies for endpoints like `GET /bookmarks` and `GET /bookmarks/:id`. 3. **Manual Penetration Testing:** Using an API client like Postman, manually attempt to perform cross-user data access by manipulating resource IDs while authenticated as a different user. 4. **Code Review:** Conduct a focused code review of all routes and services that handle user-owned data, specifically checking for the correct propagation and application of the `userId` from the auth context down to the database query.
